[build-system]
requires = ["setuptools>=61.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "ai-image-analyzer"
version = "0.1.0"
description = "Enterprise-grade AI image analyzer with real-time object detection"
authors = [
    {name = "AI Engineering Team", email = "engineering@company.com"}
]
readme = "README.md"
license = {text = "MIT"}
requires-python = ">=3.9"
keywords = ["ai", "computer-vision", "object-detection", "azure", "fastapi"]
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
]

dependencies = [
    # Core API framework
    "fastapi>=0.104.0",
    "uvicorn[standard]>=0.24.0",
    
    # Azure SDK
    "azure-cognitiveservices-vision-computervision>=0.9.0",
    "azure-identity>=1.15.0",
    
    # Data validation and serialization
    "pydantic>=2.4.0",
    "pydantic-settings>=2.0.0",
    
    # Image processing
    "pillow>=10.0.0",
    "python-multipart>=0.0.6",  # For file uploads
    
    # HTTP client
    "httpx>=0.25.0",
    
    # Environment variables
    "python-dotenv>=1.0.0",
    
    # Observability
    "structlog>=23.2.0",
    "prometheus-client>=0.19.0",
    
    # Configuration
    "python-dotenv>=1.0.0",
]

[project.optional-dependencies]
dev = [
    # Testing
    "pytest>=7.4.0",
    "pytest-asyncio>=0.21.0",
    "pytest-cov>=4.1.0",
    "pytest-mock>=3.12.0",
    "pytest-xdist>=3.3.0",  # Parallel test execution
    "coverage>=7.3.0",
    
    # Code quality and linting
    "ruff>=0.1.0",  # Fast Python linter (replaces black, isort, flake8)
    "mypy>=1.6.0",
    "bandit>=1.7.5",
    "safety>=2.3.0",
    
    # Security scanning
    "semgrep>=1.45.0",
    
    # Performance testing
    "locust>=2.17.0",
    
    # Documentation
    "mkdocs>=1.5.0",
    "mkdocs-material>=9.4.0",
    
    # Development tools
    "pre-commit>=3.5.0",
    "watchdog>=3.0.0",
]

[project.urls]
Homepage = "https://github.com/scott-ai-maker/ai-image-analyzer"
Repository = "https://github.com/scott-ai-maker/ai-image-analyzer.git"
Issues = "https://github.com/scott-ai-maker/ai-image-analyzer/issues"

[tool.setuptools.packages.find]
where = ["src"]

[tool.black]
line-length = 88
target-version = ['py39', 'py310', 'py311', 'py312']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
)/
'''

[tool.isort]
profile = "black"
multi_line_output = 3
line_length = 88
known_first_party = ["src"]

[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
addopts = [
    "-v",
    "--strict-markers",
    "--strict-config",
    "--cov=src",
    "--cov-report=term-missing",
    "--cov-report=html:htmlcov",
    "--cov-report=xml:coverage.xml",
    "--cov-fail-under=80",
    "--tb=short",
    "--maxfail=10",
    "--disable-warnings",
]
filterwarnings = [
    "ignore::DeprecationWarning",
    "ignore::PendingDeprecationWarning",
    "ignore::UserWarning",
]
markers = [
    "unit: Unit tests (isolated, fast)",
    "integration: Integration tests requiring external services",
    "e2e: End-to-end tests",
    "slow: Slow running tests (deselect with '-m \"not slow\"')",
    "performance: Performance tests",
    "security: Security-focused tests",
]
asyncio_mode = "auto"

[tool.coverage.run]
source = ["src"]
omit = [
    "*/tests/*",
    "*/venv/*",
    "*/.venv/*",
    "*/build/*",
    "*/dist/*",
    "*/__pycache__/*",
    "*/migrations/*",
]

[tool.coverage.report]
precision = 2
show_missing = true
skip_covered = false
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]

[tool.ruff]
target-version = "py39"
line-length = 88
select = [
    "E",  # pycodestyle errors
    "W",  # pycodestyle warnings
    "F",  # pyflakes
    "I",  # isort
    "B",  # flake8-bugbear
    "C4", # flake8-comprehensions
    "UP", # pyupgrade
    "ARG", # flake8-unused-arguments
    "SIM", # flake8-simplify
    "RUF", # Ruff-specific rules
]
ignore = [
    "E501",  # line too long, handled by formatter
    "B008",  # do not perform function calls in argument defaults
    "C901",  # too complex
    "RUF012", # Mutable class attributes should be annotated with `typing.ClassVar`
]

[tool.ruff.format]
quote-style = "double"
indent-style = "space"
skip-magic-trailing-comma = false
line-ending = "auto"

[tool.ruff.isort]
known-first-party = ["src"]

[tool.mypy]
python_version = "3.11"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
check_untyped_defs = true
warn_redundant_casts = true
warn_unused_ignores = true
show_error_codes = true
namespace_packages = true
explicit_package_bases = true

[[tool.mypy.overrides]]
module = [
    "azure.*",
    "uvicorn.*",
    "locust.*",
]
ignore_missing_imports = true

[tool.bandit]
exclude_dirs = ["tests"]
skips = ["B101"]  # Skip assert_used test