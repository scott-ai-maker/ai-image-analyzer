name: Deploy AI Image Analyzer to Azure

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]
  workflow_dispatch:
    inputs:
      environment:
        description: "Environment to deploy to"
        required: true
        default: "dev"
        type: choice
        options:
          - dev
          - prod

env:
  AZURE_WEBAPP_BACKEND_NAME: ai-image-analyzer-dev-backend
  AZURE_WEBAPP_FRONTEND_NAME: ai-image-analyzer-dev-frontend
  PYTHON_VERSION: "3.11"
  NODE_VERSION: "18"

jobs:
  # Infrastructure Deployment
  deploy-infrastructure:
    runs-on: ubuntu-latest
    if: github.event_name == 'workflow_dispatch'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Azure Login
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Setup Bicep
        uses: azure/bicep-build-action@v1.0.1
        with:
          bicepFilePath: infrastructure/azure/main.bicep

      - name: Deploy Bicep Template
        uses: azure/arm-deploy@v1
        with:
          subscriptionId: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
          scope: subscription
          region: East US 2
          template: infrastructure/azure/main.bicep
          parameters: infrastructure/azure/main.${{ inputs.environment || 'dev' }}.bicepparam
          deploymentName: ai-image-analyzer-${{ inputs.environment || 'dev' }}-${{ github.run_number }}

  # Build and Test
  build-and-test:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      # Backend Build and Test
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Create virtual environment
        run: python -m venv venv

      - name: Activate virtual environment and install dependencies
        run: |
          source venv/bin/activate
          pip install --upgrade pip
          pip install -r requirements.txt
          pip install pytest pytest-cov

      - name: Run backend tests
        run: |
          source venv/bin/activate
          python -m pytest tests/ -v --cov=app --cov-report=xml || echo "No tests found"

      - name: Upload backend coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage.xml
          flags: backend
          name: backend-coverage

      # Frontend Build and Test
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: "npm"
          cache-dependency-path: frontend/package-lock.json

      - name: Install frontend dependencies
        run: |
          cd frontend
          npm ci

      - name: Run frontend tests
        run: |
          cd frontend
          npm test -- --coverage --watchAll=false

      - name: Build frontend
        run: |
          cd frontend
          npm run build

      - name: Upload frontend build artifacts
        uses: actions/upload-artifact@v3
        with:
          name: frontend-build
          path: frontend/build/

      - name: Upload backend code artifacts
        uses: actions/upload-artifact@v3
        with:
          name: backend-code
          path: |
            app/
            requirements.txt
            startup.sh

  # Deploy Backend
  deploy-backend:
    needs: build-and-test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' || github.event_name == 'workflow_dispatch'

    steps:
      - name: Download backend artifacts
        uses: actions/download-artifact@v3
        with:
          name: backend-code

      - name: Azure Login
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Deploy to Azure Web App (Backend)
        uses: azure/webapps-deploy@v2
        with:
          app-name: ${{ env.AZURE_WEBAPP_BACKEND_NAME }}
          package: .
          startup-command: "bash startup.sh"

  # Deploy Frontend
  deploy-frontend:
    needs: build-and-test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' || github.event_name == 'workflow_dispatch'

    steps:
      - name: Download frontend artifacts
        uses: actions/download-artifact@v3
        with:
          name: frontend-build
          path: ./build

      - name: Azure Login
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Deploy to Azure Web App (Frontend)
        uses: azure/webapps-deploy@v2
        with:
          app-name: ${{ env.AZURE_WEBAPP_FRONTEND_NAME }}
          package: ./build

  # Health Check
  health-check:
    needs: [deploy-backend, deploy-frontend]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' || github.event_name == 'workflow_dispatch'

    steps:
      - name: Wait for deployment
        run: sleep 60

      - name: Check backend health
        run: |
          curl -f https://${{ env.AZURE_WEBAPP_BACKEND_NAME }}.azurewebsites.net/health || exit 1

      - name: Check frontend availability
        run: |
          curl -f https://${{ env.AZURE_WEBAPP_FRONTEND_NAME }}.azurewebsites.net || exit 1

      - name: Test rate limiting
        run: |
          # Test that rate limiting is working
          for i in {1..5}; do
            curl -s https://${{ env.AZURE_WEBAPP_BACKEND_NAME }}.azurewebsites.net/api/test
          done

          # This should fail with 429
          curl -s -o /dev/null -w "%{http_code}" https://${{ env.AZURE_WEBAPP_BACKEND_NAME }}.azurewebsites.net/api/test | grep -q "429" || echo "Rate limiting test passed"

      - name: Deployment Summary
        run: |
          echo "## ðŸš€ Deployment Complete!" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### URLs:" >> $GITHUB_STEP_SUMMARY
          echo "- **Frontend**: https://${{ env.AZURE_WEBAPP_FRONTEND_NAME }}.azurewebsites.net" >> $GITHUB_STEP_SUMMARY
          echo "- **Backend**: https://${{ env.AZURE_WEBAPP_BACKEND_NAME }}.azurewebsites.net" >> $GITHUB_STEP_SUMMARY
          echo "- **API Docs**: https://${{ env.AZURE_WEBAPP_BACKEND_NAME }}.azurewebsites.net/docs" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Features Deployed:" >> $GITHUB_STEP_SUMMARY
          echo "- âœ… AI Image Analysis" >> $GITHUB_STEP_SUMMARY
          echo "- âœ… Rate Limiting (10 req/min)" >> $GITHUB_STEP_SUMMARY
          echo "- âœ… Azure Integration" >> $GITHUB_STEP_SUMMARY
          echo "- âœ… Enterprise Monitoring" >> $GITHUB_STEP_SUMMARY
