name: CI/CD Pipeline

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]
  workflow_dispatch:

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}
  PYTHON_VERSION: "3.11"

jobs:
  # Testing and Quality Assurance
  test:
    name: Tests & Quality
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.9", "3.10", "3.11", "3.12"]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}

      - name: Cache pip dependencies
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pytest pytest-cov pytest-asyncio httpx

      - name: Lint with ruff
        run: |
          ruff check app/ --output-format=github

      - name: Type check with mypy
        run: |
          mypy app/ --ignore-missing-imports

      - name: Run unit tests
        run: |
          python -m pytest tests/ -v --cov=app --cov-report=xml --cov-report=html

      - name: Upload coverage reports
        uses: codecov/codecov-action@v3
        if: matrix.python-version == '3.11'
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          file: ./coverage.xml
          fail_ci_if_error: false

  # Security Analysis
  security:
    name: Security Analysis
    runs-on: ubuntu-latest
    needs: test

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install bandit[toml] safety

      - name: Run Bandit security scan
        run: |
          bandit -r app/ -f json -o bandit-report.json
        continue-on-error: true

      - name: Run Safety check
        run: |
          safety check --json --output safety-report.json
        continue-on-error: true

      - name: Upload security reports
        uses: actions/upload-artifact@v4
        with:
          name: security-reports-${{ github.sha }}
          path: |
            bandit-report.json
            safety-report.json
          retention-days: 30

  # Docker Build and Push
  docker:
    name: Docker Build & Security Scan
    runs-on: ubuntu-latest
    needs: [test, security]
    permissions:
      contents: read
      packages: write
      security-events: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          platforms: linux/amd64,linux/arm64
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.sha }}
          format: "sarif"
          output: "trivy-results.sarif"

      - name: Upload Trivy scan results
        uses: github/codeql-action/upload-sarif@v2
        if: always()
        with:
          sarif_file: "trivy-results.sarif"

  # Integration Tests
  integration:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: docker
    services:
      app:
        image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.sha }}
        ports:
          - 8000:8000
        env:
          ENVIRONMENT: testing
          DEBUG: false
          AZURE_COMPUTER_VISION_ENDPOINT: https://demo.cognitiveservices.azure.com/
          AZURE_COMPUTER_VISION_KEY: demo-key

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Wait for service
        run: |
          timeout 30 bash -c 'until curl -f http://localhost:8000/health; do sleep 2; done'

      - name: Run API integration tests
        run: |
          # Test health endpoint
          curl -f http://localhost:8000/health | jq '.'

          # Test metrics endpoint
          curl -f http://localhost:8000/metrics

          # Test OpenAPI docs
          curl -f http://localhost:8000/docs

          # Test analyze endpoint with sample data
          echo '{"image_data": "iVBORw0KGgoAAAANSUhEUgAAAAEAAAABCAYAAAAfFcSJAAAADUlEQVR42mNk+M9QDwADhgGAWjR9awAAAABJRU5ErkJggg=="}' | \
            curl -X POST -H "Content-Type: application/json" -d @- http://localhost:8000/analyze

  # Performance Tests
  performance:
    name: Performance Tests
    runs-on: ubuntu-latest
    needs: integration
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install performance testing tools
        run: |
          pip install locust

      - name: Start application
        run: |
          python -m uvicorn app.main:app --host 0.0.0.0 --port 8000 &
          sleep 10
        env:
          ENVIRONMENT: testing
          DEBUG: false
          AZURE_COMPUTER_VISION_ENDPOINT: https://demo.cognitiveservices.azure.com/
          AZURE_COMPUTER_VISION_KEY: demo-key

      - name: Run performance tests
        run: |
          # Simple load test
          python scripts/load_test.py --users 10 --duration 60s

      - name: Upload performance reports
        uses: actions/upload-artifact@v4
        with:
          name: performance-reports-${{ github.sha }}
          path: reports/
          retention-days: 30

  # Deployment
  deploy:
    name: Deploy to Azure
    runs-on: ubuntu-latest
    needs: [integration, performance]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    environment: production

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Login to Azure
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Deploy to Azure Container Apps
        run: |
          # Deploy using Azure CLI
          az containerapp update \
            --name ai-image-analyzer \
            --resource-group ${{ vars.AZURE_RESOURCE_GROUP }} \
            --image ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.sha }}

  # Release Management
  release:
    name: Create Release
    runs-on: ubuntu-latest
    needs: deploy
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Generate tag
        id: tag
        run: |
          VERSION=$(date +%Y.%m.%d)-${GITHUB_SHA::7}
          echo "version=$VERSION" >> $GITHUB_OUTPUT

      - name: Create Release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v${{ steps.tag.outputs.version }}
          release_name: Release v${{ steps.tag.outputs.version }}
          body: |
            ## Changes in this Release
            - Image analysis improvements
            - Security updates
            - Performance optimizations

            **Full Changelog**: https://github.com/${{ github.repository }}/compare/v${{ steps.tag.outputs.previous_version }}...v${{ steps.tag.outputs.version }}
          draft: false
          prerelease: false
